1. pwd: print working directory
2. history: show history of past commands
2.1 !5: runs steps 5 in history list
3. cd .. : chg directory

4. touch hello.txt: create file hello.txt
4.2 echo "hello!" >> hello.txt: write "hello!" into hello.txt
5. ls: list files
5.1. ls hello/ : list files in hello directory
6. rm hello.txt: delete hello.txt
7. mkdir hello: create new directory named hello
8. cp hello.txt hello: copy hello.txt to hello directory
9. cp hello.txt world.txt: copy hello.txt and rename it as world.txt
10. mv world.txt hello: move world.txt to hello directory
11. rm -rf hello: remove folder "hello" and its contents

12. nano hello.txt: opens hello.txt with file editor 
13. cat hello.txt: prints contents of hello.txt to command line
14. diff hello.txt world.txt: compares both txt files
14.1 1d0 = line 1 in file 1, (need to) delete, to match line 0 in file 2
14.2 1c1 = line 1 in file 1, (need to) change, to match line 1 in file 2

// Git

-- STAGING --
git add hello.txt: stages hello.txt

-- REMOVE FROM STAGING --
git rm --cached password.txt: remove password.txt from staging

-- SHOW DIFFERENCE BEFORE AND AFTER STATE -- 
git diff story.txt: shows the difference between the "before" abd "after" state of story.txt file.

-- SHOW COMMIT HISTORY -- 
git log: shows commit history

-- RETURN TO COMMIT STATE:
git reset --hard f27e1c: discard local changes and resets file to version/state at SHA "f27e1c"
great way to reset accidental commits and revert to previous versions

-- DISCARDING CHANGES --
git stash: Discard all local changes, but save them for possible re-use later
git checkout -- <file>: Discarding local changes (permanently) to a file
git reset --hard: Discard all local changes to all files permanently


-- STEPS TO INITIALISE NEW GIT --
1. git init
2. git add --all
3. git commit -m "initial commit"

-- GENERAL STEPS --
1. git add
2. git commit -m "message"
3. git push
git
